{"version":3,"sources":["components/Categories.jsx","components/NewsItem.jsx","components/NewsList.jsx","lib/usePromise.jsx","pages/NewsPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","Category","NavLink","Categories","onSelect","category","map","c","key","activeClassName","exact","to","NewsItemBlock","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","process","usePromise","query","axios","get","response","articles","data","NewsPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cdb3e5e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst categories = [\r\n    {\r\n        name:'all',\r\n        text:'전체보기'\r\n    },\r\n    {\r\n        name:'business',\r\n        text:'비즈니스'\r\n    },\r\n    {\r\n        name:'entertainment',\r\n        text:'엔터테인먼트'\r\n    },\r\n    {\r\n        name:'health',\r\n        text:'건강'\r\n    },\r\n    {\r\n        name:'science',\r\n        text:'과학'\r\n    },\r\n    {\r\n        name:'sports',\r\n        text:'스포츠'\r\n    },\r\n    {\r\n        name:'technology',\r\n        text:'기술'\r\n    },\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n    display:flex;\r\n    padding:1rem;\r\n    width:768px;\r\n    margin:0 auto;\r\n    @media screen and (max-width:768px){\r\n        width:100%;\r\n        overflow-x:auto;\r\n    }\r\n`;\r\n\r\nconst Category = styled(NavLink)`\r\n    font-size:1.125rem;\r\n    cursor:pointer;\r\n    white-space: pre;\r\n    text-decoration:none;\r\n    color:inherit;\r\n    padding-bottom:0.25rem;\r\n\r\n    &:hover{\r\n        color:#495057;\r\n    }\r\n    &.active{\r\n        font-weight:600;\r\n        border-bottom:2px solid #22b8cf;\r\n        color:#22b8cf;\r\n        &:hover{\r\n            color:#3bc9db;\r\n        }\r\n    }\r\n    &+&{\r\n        margin-left:1rem;\r\n    }\r\n`;\r\n\r\n\r\nconst Categories = ({onSelect,category})=>{\r\n    return(\r\n        <CategoriesBlock>\r\n            {categories.map(c=>(<Category key ={c.name} activeClassName=\"active\" exact={c.name==='all'} to={c.name==='all'? '/':`/${c.name}`}>{c.text}</Category>))}\r\n        </CategoriesBlock>\r\n    );\r\n};\r\n\r\nexport default Categories;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NewsItemBlock = styled.div`\r\n    display:flex;\r\n    .thumbnail{\r\n        margin-right:1rem;       \r\n        img{\r\n            display:block;\r\n            width:160px;\r\n            height:100px;\r\n            object-fit:cover;\r\n        }\r\n    }\r\n    .contents{\r\n        h2{\r\n            margin:0;\r\n            a{color:black;}\r\n        }\r\n        p{\r\n            margin:0;\r\n            line-height:1.5;\r\n            margin-top:0.5rem;\r\n            white-spane:normal;\r\n        }\r\n    }\r\n    &+&{\r\n        margin-top:3rem;\r\n    }\r\n`;\r\n\r\nconst NewsItem = ({article})=>{\r\n    const {title, description, url, urlToImage} = article;\r\n    return (\r\n        <NewsItemBlock>\r\n            {urlToImage&& (\r\n                <div className='thumbnail'>\r\n                    <a href={url} target = '_blank' rel='noopener noreferrer'>\r\n                        <img src={urlToImage} alt=\"thumbnail\"/>\r\n                    </a>\r\n                </div>\r\n            )}\r\n            <div className='contents'>\r\n                <h2>\r\n                    <a href={url} target='_blank' rel='noopener noreferrer'>{title}</a>\r\n                </h2>\r\n                <p>{description}</p>\r\n            </div>\r\n        </NewsItemBlock>\r\n    );\r\n}\r\n\r\nexport default NewsItem;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport NewsItem from './NewsItem';\r\nimport axios from 'axios';\r\nimport usePromise from '../lib/usePromise';\r\n\r\nconst NewsListBlock = styled.div`\r\n    box-sizing :border-box;\r\n    padding-bottom:3rem;\r\n    width:768px;\r\n    margin: 0 auto;\r\n    margin-top:2rem;\r\n    @media screen and (max-width:768px){\r\n        width:100%;\r\n        padding-left:1rem;\r\n        padding-right:1rem;\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst NewsList = ({category})=>{\r\n    const [loading, response, error] = usePromise(()=>{\r\n        const query = category === 'all'? '':`&category=${category}`;\r\n        return axios.get(`http://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=7b2a726252c34c099bde35a8d6a8167a`,);\r\n    },[category]);\r\n\r\n    //대기중일때\r\n    if(loading){\r\n        return<NewsListBlock>대기중..</NewsListBlock>;\r\n    }\r\n    //response값이 설정 X\r\n    if(!response){\r\n        return null;\r\n    }\r\n\r\n    //에러 발생\r\n    if(error){\r\n        return <NewsListBlock>에러 발생!</NewsListBlock>;\r\n    }\r\n\r\n    //response값이 유효할때\r\n    const {articles} = response.data;\r\n    return(\r\n        <NewsListBlock>\r\n            {articles.map(article => (\r\n                <NewsItem key={article.url}  article={article} />\r\n            ))}\r\n        </NewsListBlock>\r\n    );\r\n}\r\n\r\n\r\nexport default NewsList;","import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nexport default function usePromise(promiseCreator,deps){\r\n    //대기중 완료 실패 상태관리\r\n    const [loading, setLoading] = useState(false);\r\n    const [resolved, setResolved] = useState(null);\r\n    const [error, setError] =useState(null);\r\n\r\n    useEffect(()=>{\r\n        const process = async ()=>{\r\n            setLoading(true);\r\n            try {\r\n                const resolved = await promiseCreator();\r\n                setResolved(resolved)\r\n            } catch(e){\r\n                setError(e);\r\n            }\r\n            setLoading(false);\r\n        };\r\n        process();\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },deps);\r\n\r\n    return [loading, resolved, error];\r\n}","import React from 'react';\r\nimport Categories from '../components/Categories';\r\nimport NewsList from '../components/NewsList';\r\n\r\nconst NewsPage = ({match})=>{\r\n    //카테고리가 설정 X 기본값 all\r\n    const category = match.params.category||'all';\r\n\r\n    return (<>\r\n        <Categories />\r\n        <NewsList category={category}/>\r\n    </>);\r\n}\r\n\r\n\r\nexport default NewsPage;","import React from 'react';\nimport { Route} from 'react-router-dom';\nimport NewsPage from './pages/NewsPage';\n\nconst App = ()=>{\n  return <Route path=\"/:category?\" component={NewsPage}/>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}